#!/bin/sh

## OS/ENVIRONMENT INFO DETECTION

ostype="$(uname)"
osi="ÔÖº"

distrotype=none

if command -v getprop 1> /dev/null; then
	distrotype=android
fi
kernel="$(echo $(uname -r) | cut -d'-'  -f1-1)"
case $ostype in
	*"Linux"*)
		if [ $distrotype = android ]; then
			host="$(hostname)"
			USER="$(whoami)"
			os="Android $(getprop ro.build.version.release)"
			osi="Û∞Ä≤"
		else
			host="$(cat /proc/sys/kernel/hostname)"
			. /etc/os-release
			if [ -f /bedrock/etc/bedrock-release ]; then
				os="$(brl version)"
			else
				os="${PRETTY_NAME}"
				case $(echo $ID | sed 's/ .*//') in
					debian) osi="ÓùΩ";;
					arch) osi="Û∞£á";;
					endeavouros) osi="Ôå¢";;
					fedora) osi="Ôåä";;
					gentoo) osi="Ôåç";;
					rhel) osi="Óûª";;
					slackware) osi="Ôåò";;
					void) osi="ÔåÆ";;
					alpine) osi="ÔåÄ";;
					nixos) osi="Û±ÑÖ";;
					artix) osi="Ôåü";;
					exherbo) osi="Û∞Üö";;
					mageia) osi="Ôåê";;
					manjaro) osi="Ôåí";;
					opensuse) osi="Ôåî";;
					solus) osi="Ôå≠";;
					ubuntu) osi="Óú∫";;
					mint) osi="Û∞£≠";;
					trisquel) osi="ÔçÑ";;
					puppy) osi="ÔçÅ";;
					coreos) osi="ÔåÖ";;
					mx) osi="Ôåø";;
					vanilla) osi="Ôç¶";;
					pop_os) osi="Ôå™";;
					raspbian) osi="Ôåï";;
					deepin) osi="Ôå°";;
					almalinux) osi="Ôåù";;
					garuda) osi="Ôå∑";;
					centos) osi="ÔåÑ";;
					rocky) osi="Ôå´";;
					*) osi="ÔÖº";;
				esac
			fi
		fi
		shell=$(basename "$SHELL");;
	*"Darwin"*)
		host="$(hostname -f | sed -e 's/^[^.]*\.//')"
		mac_product="$(/usr/libexec/PlistBuddy -c "Print:ProductName" /System/Library/CoreServices/SystemVersion.plist)"
		mac_version="$(/usr/libexec/PlistBuddy -c "Print:ProductVersion" /System/Library/CoreServices/SystemVersion.plist)"
		os="${mac_product} ${mac_version}"
		osi="ÔåÇ";;
	*"FreeBSD"*)
		host="$(hostname)"
		distrotype=bsd
		os="FreeBSD $(freebsd-version | sed 's/-.*//')"
		osi="Ôåå";;
	*"OpenBSD"*)
		host="$(hostname)"
		distrotype=bsd
		os="OpenBSD $(uname -r)"
		osi="Ôå®";;
	*"NetBSD"*)
		host="$(hostname)"
		distrotype=bsd
		os="NetBSD $(uname -r)"
		osi="Û∞âÄ";;
	*)
		os="Unix-like"
		host="host"
esac

## PACKAGE MANAGER AND PACKAGES DETECTION

MANAGER=$(which nix-env pkg yum zypper dnf rpm dpkg-query brew port pacman xbps-query emerge cave apk kiss pmm /usr/sbin/slackpkg bulge yay paru pacstall cpm pmm eopkg getprop 2>/dev/null)
manager=$(basename "$MANAGER")
if [ $osi = "Û∞âÄ" ]; then
	manager="pkg_info-netbsd"
fi
case $manager in
	cpm) packages="$(cpm C)";;
	brew) packages="$(printf '%s\n' "$(brew --cellar)/"* | wc -l)";;
	port) packages="$(port installed | wc -l)";;
	dpkg-query) packages="$(dpkg-query -f '${binary:Package}\n' -W | wc -l)";;
	rpm) packages="$(rpm -qa --last| wc -l)";;
	yum) packages="$(yum list installed | wc -l)";;
	dnf) packages="$(dnf list installed | wc -l)";;
	zypper) packages="$(zypper se | wc -l)";;
	pacman) packages="$(pacman -Q | wc -l)";;
	yay) packages="$(yay -Q | wc -l)";;
	paru) packages="$(paru -Q | wc -l)";;
	pacstall) packages="$(pacstall -L | wc -l)";;
	kiss) packages="$(kiss list | wc -l)";;
	emerge) packages="$(qlist -I | wc -l)";;
	pkg) packages="$(pkg info | wc -l | tr -d ' ')";;
	cave) packages="$(cave show installed-slots | wc -l)";;
	xbps-query) packages="$(xbps-query -l | wc -l)";;
	nix-env) packages="$(nix-store -q --requisites /run/current-system/sw | wc -l)";;
	apk) packages="$(apk list --installed | wc -l)";;
	pmm) packages="$(/bedrock/libexec/pmm pacman pmm -Q 2>/dev/null | wc -l )";;
	eopkg) packages="$(eopkg li | wc -l)";;
	/usr/sbin/slackpkg) packages="$(ls /var/log/packages | wc -l)";;
	bulge) packages="$(bulge list | wc -l)";;
	pkg_info)
		packages="$(pkg_info -A | wc -l)"
		manager="pkg";;
	pkg_info-netbsd)
		packages="$(pkg_info -a | wc -l)"
		manager="pkg";;
	*)
		if [ $distrotype = android ]; then
			packages="$(dpkg-query -f '${binary:Package}\n' -W | wc -l)"
			manager="dpkg"
		else
			packages="$(ls /usr/bin | wc -l)"
			manager="bin"
		fi;;
esac

packages="${packages#"${packages%%[![:space:]]*}"}"
manager=$(echo $manager | sed "s/-query//; s/\/usr\/.*\///")

## UPTIME DETECTION

if [ $distrotype = android ]; then
    uptime="$(echo $(uptime -p) | cut -c 4-)"
elif [ $distrotype = bsd ]; then
	uptime="$(uptime | sed -e 's/.* up //; s/, [0-9]* user.*//')"
else
    case $ostype in
        *"Linux"*)
            IFS=. read -r s _ < /proc/uptime;;
        *"NetBSD"*)
            s=$(/sbin/sysctl -n kern.boottime)
            s=${s#*=}
            s=${s%,*}
            s=$(($(date +%s) - s));;
        *) 
            s=$(sysctl -n kern.boottime)
            s=${s#*=}
            s=${s%,*}
            s=$(($(date +%s) - s));;
    esac
    d="$((s / 60 / 60 / 24))"
    h="$((s / 60 / 60 % 24))"
    m="$((s / 60 % 60))"
    # Plurals
    [ "$d" -gt 1 ] && dp=s
    [ "$h" -gt 1 ] && hp=s
    [ "$m" -gt 1 ] && mp=s
    [ "$s" -gt 1 ] && sp=s
    # Hide empty fields.
    [ "$d" = 0 ] && d=
    [ "$h" = 0 ] && h=
    [ "$m" = 0 ] && m=
    [ "$m" != "" ] && s=
    # Make the output of uptime smaller.
    [ "$d" ] && uptime="$d day$dp, "
    [ "$h" ] && uptime="$uptime$h hour$hp, "
    [ "$m" ] && uptime="$uptime$m min$mp"
    [ "$s" ] && uptime="$uptime$s sec$sp"
    uptime=${uptime%, }
fi

## RAM DETECTION

case $ostype in
	*"Linux"*)
		while IFS=':k '  read -r key val _; do
			case $key in
				MemTotal)
					mem_used=$((mem_used + val))
					mem_full=$val;;
				Shmem) mem_used=$((mem_used + val));;
				MemFree|Buffers|Cached|SReclaimable) mem_used=$((mem_used - val));;
			esac
		done < /proc/meminfo
		mem_used=$((mem_used / 1024)) 
		mem_full=$((mem_full / 1024));;
	*"Darwin"*)
		mem_full=$(($(sysctl -n hw.memsize) / 1024 / 1024))
		while IFS=:. read -r key val; do
			case $key in
				*' wired'*|*' active'*|*' occupied'*)
					mem_used=$((mem_used + ${val:-0}));;
			esac
			done <<-EOF
				$(vm_stat)
						EOF

			mem_used=$((mem_used * 4 / 1024));;
	*"NetBSD"*)
		mem_full=$(($(/sbin/sysctl -n hw.physmem) / 1024 / 1024))
	        mem_free=$(($(vmstat | awk 'NR==3 {print $4}') / 1024))
		mem_used=$((mem_full - mem_free));;
	*"BSD"*)
		mem_full=$(($(sysctl -n hw.physmem) / 1024 / 1024))
		mem_free=$(($(sysctl -n vm.stats.vm.v_free_count) * $(sysctl -n vm.stats.vm.v_page_size) / 1024 / 1024))
		mem_used=$((mem_full - mem_free));;
	*)
		mem_full=0
		mem_used=0
esac
memstat="${mem_used}/${mem_full} MiB"
if which expr > /dev/null 2>&1; then
	mempercent="($(expr $(expr ${mem_used} \* 100 / ${mem_full} ))%)"
fi

## DEFINE COLORS

bold='[1m'
black='[30m'
red='[31m'
green='[32m'
yellow='[33m'
blue='[34m'
magenta='[35m'
cyan='[36m'
white='[37m'
grey='[90m'
reset='[0m'

## USER VARIABLES -- YOU CAN CHANGE THESE

lc="${reset}${bold}${magenta}"  # labels
nc="${reset}${bold}${yellow}"   # user
hn="${reset}${bold}${blue}"     # hostname
ic="${reset}${green}"           # info
c0="${reset}${grey}"            # first color
c1="${reset}${white}"           # second color
c2="${reset}${yellow}"          # third color

## OUTPUT

cat <<EOF

${c0}      ___     ${nc}${USER}${red}@${reset}${hn}${host}${reset} 
${c0}     (${c1}.. ${c0}\    ${lc}${osi}  ${ic}${os}${reset}
${c0}     (${c2}<> ${c0}|    ${lc}Óà∫  ${ic}${kernel}${reset}
${c0}    /${c1}/  \\ ${c0}\\   ${lc}Û∞çõ  ${ic}${RAM}${memstat} ${mempercent}
${c0}   ( ${c1}|  | ${c0}/|  ${lc}Û∞èî  ${ic}${packages} (${manager})${reset}
${c2}  _${c0}/\\ ${c1}__)${c0}/${c2}_${c0})  ${lc}Û∞Ö∂  ${ic}${uptime}${reset}
${c2}  \/${c0}-____${c2}\/${reset}   ${lc}Óà´  ${red}‚ñà‚ñà‚ñà${green}‚ñà‚ñà‚ñà${yellow}‚ñà‚ñà‚ñà${blue}‚ñà‚ñà‚ñà${magenta}‚ñà‚ñà‚ñà${cyan}‚ñà‚ñà‚ñà${reset}
EOF
